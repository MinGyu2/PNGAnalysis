/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pnganalysis;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class App {
    static int iDatCnt = 0;
    public static void main(String[] args) throws IOException{
        var file = new File(args[0]);
        if(!file.exists()){
            System.out.println("Do not exists this file!");
            return;
        }
        var fs = new FileInputStream(file);
        try{   
            var signature = new byte[8];
            fs.read(signature);
            if(!isPNG(signature)){
                System.out.println("This file is not PNG file. Please input the png file!");
                return;
            }
            // find length
            
            var len = new byte[4];
            while(fs.read(len)!=-1){
                // fs.read(len);
                int l = 0;
                for(int i = 0;i<4;i++){
                    l = (l<<8)+((int)len[i]&0xff);
                }
                byte[] data = new byte[l+4]; // type 같이 받아오기
                byte[] crc = new byte[4]; // crc 받아오기
                fs.read(data);
                fs.read(crc);
                // CRC 오류 있는지 확인
                if(crc32(data,crc) != 0){
                    System.out.println("fail!!");
                    return;
                }

                printChunk(data, l);
            }
            // Chunk structure
            // 4byte length
            // 4byte type (chunk name)
            // length byte (chunk data)
            // 4byte (CRC)
        }finally{
            fs.close();
        }
    }
    static void printChunk(byte[] data, int len){
        char[] type = new char[4];
        for(int i = 0;i<4;i++){
            type[i] = (char)data[i];
        }
        StringBuilder sb = new StringBuilder();
        if(isEqual(type, "IHDR")){
            new IHDRofPNG(data, 4);
        }else if(isEqual(type, "IDAT")){
            // s.append()
            sb.append(++iDatCnt).append(' ');
        }
        sb.append(type);
        sb.append(String.format(" (%d byte)", len));
        System.out.println(sb);
        // System.out.println();
    }
    static boolean isEqual(char[] type, String sType){ // 4byte
        char[] cmp = sType.toCharArray();
        for(int i = 0;i<4;i++){
            if(type[i] != cmp[i]){
                return false;
            }
        }
        return true;
    }
    static int crc32(byte[] stream, byte[] crcB){
        int crc = 0;
        for(int i = 0;i<4;i++){
            crc = (crc<<8) + ((int)crcB[i]&0xff);
        }
        int[] crcTable = new int[256];
        int ployd = 0xedb88320;//Long.parseLong("edb88320", 16);
        // System.out.println(String.format("%x",crc));
        for(int n = 0;n<256;n++){
            int c = n;
            for(int k = 0;k<8;k++){
                if((c&1) == 1){
                    c = ployd^((c>>1)&0x7FFFFFFF);
                }else{
                    c = ((c>>1)&0x7FFFFFFF);
                }
            }
            crcTable[n] = c;
        }
        int c = 0xffffffff;
        for(int i = 0;i<stream.length;i++){
            c = crcTable[(c^stream[i]) & 0xff]^((c>>8)&0xffffff);
        }
        c ^= 0xffffffff;
        System.out.println(String.format("%x", c^crc));
        return c^crc;
    }
    static boolean isPNG(byte[] signature){
        //-119, 80, 78, 71, 13, 10, 26, 10
        byte[] png = {-119, 80, 78, 71, 13, 10, 26, 10};
        for(int i = 0;i<8;i++){
            if(png[i] != signature[i]){
                return false;
            }
        }
        return true;
    }
}
